{"ast":null,"code":"const clientID = \"70aa26180af6424caf987510e47c6173\";\nconst redirectURI = \"http://localhost:3000/\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accesssTokenMatch && expiresInMatch) {\n      accessToken = accesssTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); // wipes the access token and URL parameters after they expire\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0],\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/Rick/Jammming/jammming/src/util/Spotify.js"],"names":["clientID","redirectURI","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","accesssTokenMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AAEA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAGF,WAAH,EAAe;AACX,aAAOA,WAAP;AACH,KAHY,CAIb;;;AACA,UAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAIE,iBAAiB,IAAID,cAAzB,EAAyC;AACrCR,MAAAA,WAAW,GAAGS,iBAAiB,CAAC,CAAD,CAA/B;AACA,YAAMC,SAAS,GAAGC,MAAM,CAACH,cAAc,CAAC,CAAD,CAAf,CAAxB,CAFqC,CAIrC;;AACAJ,MAAAA,MAAM,CAACQ,UAAP,CAAkB,MAAMZ,WAAW,GAAG,EAAtC,EAA0CU,SAAS,GAAG,IAAtD;AACAN,MAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOd,WAAP;AACH,KARD,MAQO;AACH,YAAMe,SAAS,GAAI,oDAAmDjB,QAAS,kEAAiEC,WAAY,EAA5J;AACAK,MAAAA,MAAM,CAACC,QAAP,GAAkBU,SAAlB;AACH;AACJ,GArBW;;AAuBZC,EAAAA,MAAM,CAACC,IAAD,EAAM;AACR,UAAMjB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,WAAOgB,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EAA2D;AACnEE,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASpB,WAAY;AADhC;AAD0D,KAA3D,CAAL,CAIJqB,IAJI,CAICC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KANM,EAMJF,IANI,CAMCG,YAAY,IAAI;AACpB,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtB,eAAO,EAAP;AACH;;AACD,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;AAC3CC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADiC;AAE3CC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAF+B;AAG3CC,QAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CAHmC;AAI3CC,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJwB;AAK3CI,QAAAA,GAAG,EAAEN,KAAK,CAACM;AALgC,OAAL,CAAnC,CAAP;AAQH,KAlBM,CAAP;AAmBH;;AA5CW,CAAhB;AA8CA,eAAejC,OAAf","sourcesContent":["const clientID = \"70aa26180af6424caf987510e47c6173\";\r\nconst redirectURI = \"http://localhost:3000/\";\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken){\r\n            return accessToken;\r\n        }\r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accesssTokenMatch && expiresInMatch) {\r\n            accessToken = accesssTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            // wipes the access token and URL parameters after they expire\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json()\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0],\r\n                album: track.album.name,\r\n                uri: track.uri\r\n\r\n            }));\r\n        });\r\n    },\r\n}\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}