{"ast":null,"code":"const clientID = \"70aa26180af6424caf987510e47c6173\"; //before step 97 use the following line of code\n//const redirectURI = \"http://localhost:3000/\";\n//at step 97 use the following with YOU\n\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check for access token match\n\n\n    const accesssTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accesssTokenMatch && expiresInMatch) {\n      accessToken = accesssTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); // wipes the access token and URL parameters after they expire\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artists: track.artists[0],\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  //note in the line of code below the instructor mispells savePlaylist as savePlayList note capital \"l\"\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/Rick/Jammming/jammming/src/util/Spotify.js"],"names":["clientID","accessToken","Spotify","getAccessToken","accesssTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","redirectURI","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB,C,CACA;AACA;AACA;;AAEA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAGF,WAAH,EAAe;AACX,aAAOA,WAAP;AACH,KAHY,CAIb;;;AACA,UAAMG,iBAAiB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAA1B;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAIJ,iBAAiB,IAAIK,cAAzB,EAAyC;AACrCR,MAAAA,WAAW,GAAGG,iBAAiB,CAAC,CAAD,CAA/B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB,CAFqC,CAIrC;;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOb,WAAP;AACH,KARD,MAQO;AACH,YAAMc,SAAS,GAAI,oDAAmDf,QAAS,kEAAiEgB,WAAY,EAA5J;AACAX,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACH;AACJ,GArBW;;AAuBZE,EAAAA,MAAM,CAACC,IAAD,EAAM;AACR,UAAMjB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,WAAOgB,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EAA2D;AACnEE,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASpB,WAAY;AADhC;AAD0D,KAA3D,CAAL,CAIJqB,IAJI,CAICC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KANM,EAMJF,IANI,CAMCG,YAAY,IAAI;AACpB,UAAI,CAACA,YAAY,CAACC,MAAlB,EAA0B;AACtB,eAAO,EAAP;AACH;;AACD,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;AAC3CC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADiC;AAE3CC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAF+B;AAG3CC,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAc,CAAd,CAHkC;AAI3CC,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,CAAYF,IAJwB;AAK3CG,QAAAA,GAAG,EAAEL,KAAK,CAACK;AALgC,OAAL,CAAnC,CAAP;AAQH,KAlBM,CAAP;AAmBH,GA5CW;;AA6ChB;AACIC,EAAAA,YAAY,CAACJ,IAAD,EAAOK,SAAP,EAAkB;AAC1B,QAAG,CAACL,IAAD,IAAS,CAACK,SAAS,CAACC,MAAvB,EAA+B;AAC3B;AACH;;AACD,UAAMpC,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMiB,OAAO,GAAG;AAAEC,MAAAA,aAAa,EAAG,UAASpB,WAAY;AAAvC,KAAhB;AACA,QAAIqC,MAAJ;AAEA,WAAOnB,KAAK,CAAC,+BAAD,EAAkC;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAAlC,CAAL,CACLE,IADK,CACAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADZ,EAELF,IAFK,CAECG,YAAY,IAAI;AACpBa,MAAAA,MAAM,GAAGb,YAAY,CAACK,EAAtB;AACA,aAAOX,KAAK,CAAG,oCAAmCmB,MAAO,YAA7C,EACZ;AACIlB,QAAAA,OAAO,EAAEA,OADb;AAEImB,QAAAA,MAAM,EAAE,MAFZ;AAGIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEX,UAAAA,IAAI,EAAEA;AAAR,SAAf;AAHV,OADY,CAAL,CAKJT,IALI,CAKCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALb,EAMLF,IANK,CAMAG,YAAY,IAAI;AACnB,cAAMkB,UAAU,GAAGlB,YAAY,CAACK,EAAhC;AACA,eAAOX,KAAK,CAAG,oCAAmCmB,MAAO,cAAaK,UAAW,SAArE,EAA8E;AACtFvB,UAAAA,OAAO,EAAEA,OAD6E;AAEtFmB,UAAAA,MAAM,EAAE,MAF8E;AAGtFC,UAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAAEE,YAAAA,IAAI,EAAER;AAAR,WAAf;AAH+E,SAA9E,CAAZ;AAKH,OAbM,CAAP;AAcH,KAlBM,CAAP;AAmBH;;AAzEW,CAAhB;AA2EA,eAAelC,OAAf","sourcesContent":["const clientID = \"70aa26180af6424caf987510e47c6173\";\r\n//before step 97 use the following line of code\r\n//const redirectURI = \"http://localhost:3000/\";\r\n//at step 97 use the following with YOU\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken){\r\n            return accessToken;\r\n        }\r\n        // check for access token match\r\n        const accesssTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accesssTokenMatch && expiresInMatch) {\r\n            accessToken = accesssTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            // wipes the access token and URL parameters after they expire\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artists: track.artists[0],\r\n                album: track.album.name,\r\n                uri: track.uri\r\n\r\n            }));\r\n        });\r\n    },\r\n//note in the line of code below the instructor mispells savePlaylist as savePlayList note capital \"l\"\r\n    savePlaylist(name, trackUris) {\r\n        if(!name || !trackUris.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then (jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch (`https://api.spotify.com/v1/users/${userId}/playlists`, \r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch (`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body:  JSON.stringify({ uris: trackUris })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}