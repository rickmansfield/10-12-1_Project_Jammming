{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accesssTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ff0b381.chunk.js","sourcesContent":["const clientID = \"70aa26180af6424caf987510e47c6173\";\r\n//before step 97 use the following line of code\r\n//const redirectURI = \"http://localhost:3000/\";\r\n//at step 97 use the following with YOUR selected domain name I used MINE.\r\n//follow the video NOT the written instructions for deployment. I used my VSCode Terminal not Node or powershell\r\n//also if needed you may have to run 'powershell' as administrator and change restrictions. \r\nconst redirectURI = 'http://damaged-man.surge.sh';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken){\r\n            return accessToken;\r\n        }\r\n        // check for access token match\r\n        const accesssTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accesssTokenMatch && expiresInMatch) {\r\n            accessToken = accesssTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            // wipes the access token and URL parameters after they expire\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artists: track.artists[0],\r\n                album: track.album.name,\r\n                uri: track.uri\r\n\r\n            }));\r\n        });\r\n    },\r\n//note in the line of code below the instructor mispells savePlaylist as savePlayList note capital \"l\"\r\n    savePlaylist(name, trackUris) {\r\n        if(!name || !trackUris.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then (jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch (`https://api.spotify.com/v1/users/${userId}/playlists`, \r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch (`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body:  JSON.stringify({ uris: trackUris })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\nexport default Spotify;","import React from 'react';\r\n\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      term:''\r\n    }\r\n\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search(){\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term: event.target.value});\r\n  }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n      </div>\r\n      ) }\r\n    }\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  \r\n  }\r\n  renderAction(){\r\n    if(this.props.isRemoval) {\r\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n    } else {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n          <div className=\"Track-information\">\r\n            <h3>{this.props.track.name}</h3>\r\n            <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n          </div>\r\n          {this.renderAction()}\r\n      </div>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\n\r\nimport './TrackList.css';\r\n\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"TrackList\">\r\n          {\r\n            \r\n            \r\n            this.props.tracks.map(track => \r\n            {\r\n              return <Track track={track} \r\n                key={track.id} \r\n                onAdd={this.props.onAdd} \r\n                onRemove={this.props.onRemove}\r\n                isRemoval={this.props.isRemoval}\r\n              />\r\n            })\r\n          }\r\n        </div>\r\n      ) \r\n    }\r\n  }\r\nexport default TrackList;","import React from 'react';\r\n\r\nimport './SearchResults.css';\r\n\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"Playlist\">\r\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n        <TrackList\r\n          tracks={this.props.playlistTracks} \r\n          onRemove={this.props.onRemove} \r\n          isRemoval={true} \r\n        />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n      ) }\r\n    }\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from'../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      //for step 95 use the next line of code\n      searchResults: [],\n\n      //for steps befor #95\n      /*searchResults: [\n      {name: 'name1', artist: 'artist 1', album: 'album1', id: 1},\n      {name: 'name2', artist: 'artist 2', album: 'album2', id: 2},\n      {name: 'name3', artist: 'artist 3', album: 'album3', id: 3}\n      ], */\n\n      playlistName: 'My Playlist',\n      \n      //The next line of code is for step 95\n      playlistTracks: [],\n\n      //Use the following code before step #95\n      /*playlistTracks: [\n        {name: 'playList_name1', artist: 'playList_artist 1', album: 'playList_album1', id: 4},\n        {name: 'playList_name2', artist: 'playList_artist 2', album: 'playList_album2', id: 5},\n        {name: 'playList_name3', artist: 'playList_artist 3', album: 'playList_album3', id: 6}\n      ],*/\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id)\n     \n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist ( this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term){\n    //for steps before 88 use the next line of code\n    //console.log(term);\n    //for step 88 change the above line of code to the following\n      Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove = {this.removeTrack} \n              onNameChange = {this.updatePlaylistName}\n              onSave = {this.savePlaylist}\n              />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}